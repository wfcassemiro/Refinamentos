// DIAGN√ìSTICO FINAL - Execute no console do site v.translators101.com
console.log("üîç === DIAGN√ìSTICO FINAL DO PROBLEMA ===");

// 1. Testar a requisi√ß√£o diretamente
async function testeRequisicaoCompleta() {
    const testId = '115faa0d55024b9b9670b82c4c7f9ad4';
    const url = `manage_announcements.php?id=${testId}`;
    
    console.log(`üåê Testando URL: ${url}`);
    
    try {
        const response = await fetch(url);
        console.log(`üì° Status: ${response.status} ${response.statusText}`);
        console.log(`üìã Headers:`, [...response.headers.entries()]);
        
        if (response.ok) {
            const data = await response.json();
            console.log(`üìä Dados recebidos:`, data);
            return data;
        } else {
            const errorText = await response.text();
            console.log(`‚ùå Erro texto:`, errorText);
            return null;
        }
    } catch (error) {
        console.log(`üí• Erro fetch:`, error);
        return null;
    }
}

// 2. Testar fun√ß√£o editLecture step by step
function testeEditLectureDetalhado(lectureId) {
    console.log(`üß™ === TESTE DETALHADO editLecture ===`);
    console.log(`üìù ID recebido: ${lectureId}`);
    
    try {
        // Step 1: Verificar modal title
        console.log(`Step 1: Definindo t√≠tulo do modal...`);
        const modalTitleElement = document.getElementById('modalTitle');
        console.log(`- Elemento modalTitle:`, modalTitleElement);
        if (modalTitleElement) {
            modalTitleElement.textContent = 'Editar Palestra - TESTE';
            console.log(`‚úÖ T√≠tulo definido: ${modalTitleElement.textContent}`);
        } else {
            console.log(`‚ùå Elemento modalTitle n√£o encontrado!`);
            return;
        }
        
        // Step 2: Verificar lectureId input
        console.log(`Step 2: Definindo lectureId...`);
        const lectureIdElement = document.getElementById('lectureId');
        console.log(`- Elemento lectureId:`, lectureIdElement);
        if (lectureIdElement) {
            lectureIdElement.value = lectureId;
            console.log(`‚úÖ LectureId definido: ${lectureIdElement.value}`);
        } else {
            console.log(`‚ùå Elemento lectureId n√£o encontrado!`);
            return;
        }
        
        // Step 3: Verificar se √© palestra padr√£o
        console.log(`Step 3: Verificando tipo de palestra...`);
        if (lectureId.startsWith('default-')) {
            console.log(`‚ö° Palestra padr√£o detectada`);
            if (typeof getDefaultLectureData === 'function') {
                const lectureData = getDefaultLectureData(lectureId);
                console.log(`üìã Dados padr√£o:`, lectureData);
                if (typeof populateLectureForm === 'function') {
                    populateLectureForm(lectureData);
                    console.log(`‚úÖ Formul√°rio populado`);
                } else {
                    console.log(`‚ùå Fun√ß√£o populateLectureForm n√£o encontrada`);
                }
            } else {
                console.log(`‚ùå Fun√ß√£o getDefaultLectureData n√£o encontrada`);
            }
            
            // Mostrar modal
            const modal = document.getElementById('lectureModal');
            if (modal) {
                modal.style.display = 'flex';
                console.log(`‚úÖ Modal exibido para palestra padr√£o`);
            } else {
                console.log(`‚ùå Elemento lectureModal n√£o encontrado`);
            }
            return;
        }
        
        // Step 4: Buscar dados da API
        console.log(`Step 4: Fazendo requisi√ß√£o para API...`);
        testeRequisicaoCompleta().then(data => {
            if (data) {
                console.log(`‚úÖ Dados recebidos da API`);
                if (typeof populateLectureForm === 'function') {
                    populateLectureForm(data);
                    console.log(`‚úÖ Formul√°rio populado com dados da API`);
                } else {
                    console.log(`‚ùå Fun√ß√£o populateLectureForm n√£o encontrada`);
                }
                
                const modal = document.getElementById('lectureModal');
                if (modal) {
                    modal.style.display = 'flex';
                    console.log(`‚úÖ Modal exibido com dados da API`);
                } else {
                    console.log(`‚ùå Elemento lectureModal n√£o encontrado`);
                }
            } else {
                console.log(`‚ùå Falha ao obter dados da API`);
            }
        });
        
    } catch (error) {
        console.log(`üí• Erro no teste:`, error);
    }
}

// 3. Verificar se h√° conflitos de CSS que possam estar escondendo o modal
function verificarModalCSS() {
    console.log(`üé® === VERIFICANDO CSS DO MODAL ===`);
    
    const modal = document.getElementById('lectureModal');
    if (modal) {
        const styles = window.getComputedStyle(modal);
        console.log(`üìã Estilos do modal:`, {
            display: styles.display,
            visibility: styles.visibility,
            opacity: styles.opacity,
            zIndex: styles.zIndex,
            position: styles.position,
            top: styles.top,
            left: styles.left,
            width: styles.width,
            height: styles.height
        });
        
        if (styles.display === 'none') {
            console.log(`‚ö†Ô∏è Modal est√° com display: none`);
        }
        
        if (styles.visibility === 'hidden') {
            console.log(`‚ö†Ô∏è Modal est√° com visibility: hidden`);
        }
        
        if (styles.opacity === '0') {
            console.log(`‚ö†Ô∏è Modal est√° com opacity: 0`);
        }
        
    } else {
        console.log(`‚ùå Modal n√£o encontrado no DOM`);
    }
}

// 4. Verificar todos os event listeners nos bot√µes
function verificarEventListeners() {
    console.log(`üñ±Ô∏è === VERIFICANDO EVENT LISTENERS ===`);
    
    const editButtons = document.querySelectorAll('[onclick*="editLecture"]');
    console.log(`üìã Encontrados ${editButtons.length} bot√µes com editLecture`);
    
    editButtons.forEach((btn, index) => {
        console.log(`Bot√£o ${index + 1}:`);
        console.log(`- onclick: ${btn.getAttribute('onclick')}`);
        console.log(`- disabled: ${btn.disabled}`);
        console.log(`- hidden: ${btn.hidden}`);
        console.log(`- style.display: ${btn.style.display}`);
        console.log(`- Vis√≠vel:`, btn.offsetWidth > 0 && btn.offsetHeight > 0);
    });
}

// 5. Executar todos os testes
console.log(`üöÄ Executando diagn√≥stico completo...`);

console.log(`\n1Ô∏è‚É£ Testando requisi√ß√£o...`);
testeRequisicaoCompleta();

console.log(`\n2Ô∏è‚É£ Verificando CSS...`);
verificarModalCSS();

console.log(`\n3Ô∏è‚É£ Verificando bot√µes...`);
verificarEventListeners();

console.log(`\nüéØ Para testar a fun√ß√£o editLecture:`);
console.log(`testeEditLectureDetalhado('115faa0d55024b9b9670b82c4c7f9ad4')`);

console.log(`\n‚úÖ Diagn√≥stico configurado!`);